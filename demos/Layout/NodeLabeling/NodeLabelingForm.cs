/****************************************************************************
 ** 
 ** This demo file is part of yFiles.NET 5.3.
 ** Copyright (c) 2000-2020 by yWorks GmbH, Vor dem Kreuzberg 28,
 ** 72070 Tuebingen, Germany. All rights reserved.
 ** 
 ** yFiles demo files exhibit yFiles.NET functionalities. Any redistribution
 ** of demo files in source code or binary form, with or without
 ** modification, is not permitted.
 ** 
 ** Owners of a valid software license for a yFiles.NET version that this
 ** demo is shipped with are allowed to use the demo source code as basis
 ** for their own yFiles.NET powered applications. Use of such programs is
 ** governed by the rights and conditions as set out in the yFiles.NET
 ** license agreement.
 ** 
 ** THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED
 ** WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 ** NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 ** TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 ** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 ** LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 ** NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 ** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ** 
 ***************************************************************************/

using System;
using System.Collections.Generic;
using System.Drawing;
using System.IO;
using System.Threading.Tasks;
using System.Windows.Forms;
using System.Windows.Forms.Design;
using System.Windows.Markup;
using Demo.yFiles.Layout.NodeLabeling.Properties;
using yWorks.Controls;
using yWorks.Controls.Input;
using yWorks.Geometry;
using yWorks.Graph;
using yWorks.Graph.LabelModels;
using yWorks.Graph.Styles;
using yWorks.Layout;
using yWorks.Layout.Labeling;

[assembly : XmlnsDefinition("http://www.yworks.com/yfiles.net/5.0/demos/NodeLabelingWindow", "Demo.yFiles.Layout.NodeLabeling")]
[assembly : XmlnsPrefix("http://www.yworks.com/yfiles.net/5.0/demos/NodeLabelingWindow", "demo")]

namespace Demo.yFiles.Layout.NodeLabeling
{
  /// <summary>
  /// Shows how to use a node labeling algorithm with different label models.
  /// </summary>
  public partial class NodeLabelingForm : Form
  {

    /// <summary>
    /// Automatically generated by Visual Studio.
    /// Wires up the UI components and adds a 
    /// <see cref="GraphControl"/> to the window.
    /// </summary>
    public NodeLabelingForm() {
      InitializeComponent();

      ZoomInButton.SetCommand(Commands.IncreaseZoom, graphControl);
      ZoomOutButton.SetCommand(Commands.DecreaseZoom, graphControl);
      FitContentButton.SetCommand(Commands.FitContent, graphControl);

      // View menu
      zoomInToolStripMenuItem.SetCommand(Commands.IncreaseZoom, graphControl);
      zoomOutToolStripMenuItem.SetCommand(Commands.DecreaseZoom, graphControl);
      fitGraphBoundsToolStripMenuItem.SetCommand(Commands.FitContent, graphControl);

      deleteButton.SetCommand(Commands.Delete, graphControl);
    }

    #region Initialization

    /// <summary>
    /// Called upon loading of the form.
    /// This method initializes the graph and the input mode.
    /// </summary>
    /// <seealso cref="InitializeGraph"/>
    protected virtual async void OnLoad(object src, EventArgs e) {
      try {
        // load description
        description.LoadFile(new MemoryStream(Resources.description), RichTextBoxStreamType.RichText);
        // add background
        object userObject = new BackgroundVisualCreator();
        graphControl.BackgroundGroup.AddChild(userObject);
        // initialize the graph
        InitializeGraph();
        InitializeStyles();

        // initialize the input mode
        InitializeInputModes();
        // initialize the options for size and label model
        SetupOptions();

      // do initial label placement
      await DoLabelPlacement();
      graphControl.FitGraphBounds();
      } catch (Exception exception) {
        MessageBox.Show(exception.Message,"Error loading form");
      }
    }

    /// <summary>
    /// Creates a new <see cref="GraphEditorInputMode"/> and registers
    /// the result as the <see cref="CanvasControl.InputMode"/>.
    /// </summary>
    protected virtual void InitializeInputModes() {
      var graphEditorInputMode = new GraphEditorInputMode {ShowHandleItems = GraphItemTypes.None};
      //Automatically add a label when a node is created interactively
      graphEditorInputMode.NodeCreated += (o, args) => graphControl.Graph.AddLabel(args.Item, "City");
      //Prevent creation of edges
      graphEditorInputMode.AllowCreateEdge = false;
      graphControl.InputMode = graphEditorInputMode;
    }

    private void InitializeStyles() {
      graphControl.Graph.NodeDefaults.Style = new ShinyPlateNodeStyle {Brush = Brushes.Orange, DrawShadow = false, Radius = 1};
      graphControl.Graph.NodeDefaults.Size = new SizeD(10, 10);

      var innerLabelStyle = new DefaultLabelStyle();
      innerLabelStyle.Font = new Font("Arial", 8);
      var labelStyle = new CityLabelStyle(innerLabelStyle) {InnerLabelStyle = innerLabelStyle};

      graphControl.Graph.NodeDefaults.Labels.Style = labelStyle;
      graphControl.Graph.NodeDefaults.Labels.LayoutParameter = ExteriorLabelModel.North;
    }

    /// <summary>
    /// Create the initial sample graph
    /// </summary>
    private void InitializeGraph() {
      //Read initial graph from embedded resource
      graphControl.ImportFromGraphML("Resources\\uscities.graphml");
    }

    #endregion

    private readonly Dictionary<string, ILabelModel> LabelModels =
        new Dictionary<string, ILabelModel>();

    private bool inLayout = false;

    #region option setup
    /// <summary>
    /// Populates the ToolStrip's LabelModel combobox
    /// </summary>
    private void SetupOptions() {
      const string LABEL_MODEL_INTERIOR = "Interior";
      const string LABEL_MODEL_EXTERIOR = "Exterior";
      const string LABEL_MODEL_FREENODE = "Free Node";
      const string LABEL_MODEL_SANDWICH = "Sandwich";
      const string LABEL_MODEL_THREE_DISTANCE = "Three Distances";

      LabelModels.Add(LABEL_MODEL_INTERIOR, new InteriorLabelModel());
      LabelModels.Add(LABEL_MODEL_EXTERIOR, new ExteriorLabelModel() { Insets = new InsetsD(10) });
      LabelModels.Add(LABEL_MODEL_FREENODE, new FreeNodeLabelModel());
      LabelModels.Add(LABEL_MODEL_SANDWICH, new SandwichLabelModel() { YOffset = 10 });

      IList<ILabelModelParameter> list = new List<ILabelModelParameter>();
      var model = new ExteriorLabelModel() { Insets = new InsetsD(5) };
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.North));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.NorthEast));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.NorthWest));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.South));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.SouthEast));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.SouthWest));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.East));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.West));
      model = new ExteriorLabelModel() { Insets = new InsetsD(10) };
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.North));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.NorthEast));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.NorthWest));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.South));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.SouthEast));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.SouthWest));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.East));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.West));
      model = new ExteriorLabelModel() { Insets = new InsetsD(15) };
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.North));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.NorthEast));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.NorthWest));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.South));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.SouthEast));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.SouthWest));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.East));
      list.Add(model.CreateParameter(ExteriorLabelModel.Position.West));

      var genericLabelModel = new GenericLabelModel(list[0]);
      foreach (var labelModelParameter in list) {
        // set different profits for various insets
        var insets = ((ExteriorLabelModel) labelModelParameter.Model).Insets.Top;
        double profit = insets < 10 ? 1.0 : insets < 15 ? 0.9 : 0.8;
        genericLabelModel.AddParameter(labelModelParameter, new LabelCandidateDescriptor { Profit = profit });
      }
      LabelModels.Add(LABEL_MODEL_THREE_DISTANCE, genericLabelModel);
      // create the options
      foreach (var key in LabelModels.Keys) {
        labelModelComboBox.Items.Add(key);
      }
      labelModelComboBox.SelectedItem = LABEL_MODEL_EXTERIOR;

    }
    #endregion

    /// <summary>
    /// Does the label placement using the generic labeling algorithm. Before this, the model and size of the labels is
    /// set according to the option handlers settings.
    /// </summary>
    private async Task DoLabelPlacement() {
      if (inLayout) {
        return;
      }
      inLayout = true;

      toolStrip.Enabled = false;

      //desired label model
      ILabelModel labelModel = LabelModels[labelModelComboBox.SelectedItem.ToString()];
      //desired label size
      int size = Convert.ToInt32(sizeNumericUpDown.NumericUpDownControl.Text);

      foreach (var label in graphControl.Graph.Labels) {
        if (label.Owner is INode) {
          // only update the label model parameter if the label model changed
          if (labelModel != graphControl.Graph.NodeDefaults.Labels.LayoutParameter.Model) {
            graphControl.Graph.SetLabelLayoutParameter(label, labelModel.CreateDefaultParameter());
          }
          var cityLabelStyle = label.Style as CityLabelStyle;
          if (cityLabelStyle != null && cityLabelStyle.InnerLabelStyle is DefaultLabelStyle) {
            var font = ((DefaultLabelStyle) cityLabelStyle.InnerLabelStyle).Font;
            ((DefaultLabelStyle) cityLabelStyle.InnerLabelStyle).Font = new Font(font.FontFamily, size);
          }
          graphControl.Graph.AdjustLabelPreferredSize(label);
        }
      }
      {
        // set as default label model parameter
        graphControl.Graph.NodeDefaults.Labels.LayoutParameter = labelModel.CreateDefaultParameter();
        var cityLabelStyle = graphControl.Graph.NodeDefaults.Labels.Style as CityLabelStyle;
        if (cityLabelStyle != null && cityLabelStyle.InnerLabelStyle is DefaultLabelStyle) {
          var font = ((DefaultLabelStyle) cityLabelStyle.InnerLabelStyle).Font;
          ((DefaultLabelStyle) cityLabelStyle.InnerLabelStyle).Font = new Font(font.FontFamily, size);
        }
      }
      graphControl.Invalidate();

      // configure and run the layout algorithm
      var labelingAlgorithm = new GenericLabeling
                                          {
                                            MaximumDuration = 0,
                                            OptimizationStrategy = OptimizationStrategy.Balanced,
                                            PlaceEdgeLabels = false,
                                            PlaceNodeLabels = true,
                                            ReduceLabelOverlaps = true,
                                            ProfitModel = new ExtendedLabelCandidateProfitModel(),
                                          };

      var layoutExecutor = new LayoutExecutor(graphControl, graphControl.Graph, labelingAlgorithm)
      {
        Duration = TimeSpan.FromMilliseconds(500),
        EasedAnimation = true,
        AnimateViewport = false,
        UpdateContentRect = true
      };

      await layoutExecutor.Start();
      
      toolStrip.Enabled = true;
      inLayout = false;
    }

    #region Main

    /// <summary>
    /// The main entry point for the application.
    /// </summary>
    [STAThread]
    private static void Main() {
      Application.EnableVisualStyles();
      Application.Run(new NodeLabelingForm());
    }

    private void exitToolStripMenuItem_Click(object sender, EventArgs e) {
      Application.Exit();
    }

    #endregion

    private async void PlaceLabelsButton_OnClick(object sender, EventArgs e) {
      await DoLabelPlacement();
    }
  }

  #region toolstrip numeric container
  /// <summary>
  /// A helper class to make a NumericUpDown control fit into the toolstrip,
  /// used to modify the size of labels.
  /// </summary>
  [ToolStripItemDesignerAvailability(ToolStripItemDesignerAvailability.ToolStrip)]
  public class ToolStripNumberControl : ToolStripControlHost
  {
    public ToolStripNumberControl()
        : base(new NumericUpDown()) {
    }

    protected override void OnSubscribeControlEvents(Control control) {
      base.OnSubscribeControlEvents(control);
      ((NumericUpDown) control).ValueChanged += OnValueChanged;
    }

    protected override void OnUnsubscribeControlEvents(Control control) {
      base.OnUnsubscribeControlEvents(control);
      ((NumericUpDown) control).ValueChanged -= OnValueChanged;
    }

    public event EventHandler ValueChanged;

    public Control NumericUpDownControl => Control as NumericUpDown;

    public void OnValueChanged(object sender, EventArgs e) {
      ValueChanged?.Invoke(this, e);
    }
  }

  #endregion
}
