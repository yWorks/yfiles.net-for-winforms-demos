/****************************************************************************
 ** 
 ** This demo file is part of yFiles.NET 5.4.
 ** Copyright (c) 2000-2021 by yWorks GmbH, Vor dem Kreuzberg 28,
 ** 72070 Tuebingen, Germany. All rights reserved.
 ** 
 ** yFiles demo files exhibit yFiles.NET functionalities. Any redistribution
 ** of demo files in source code or binary form, with or without
 ** modification, is not permitted.
 ** 
 ** Owners of a valid software license for a yFiles.NET version that this
 ** demo is shipped with are allowed to use the demo source code as basis
 ** for their own yFiles.NET powered applications. Use of such programs is
 ** governed by the rights and conditions as set out in the yFiles.NET
 ** license agreement.
 ** 
 ** THIS SOFTWARE IS PROVIDED ''AS IS'' AND ANY EXPRESS OR IMPLIED
 ** WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
 ** MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN
 ** NO EVENT SHALL yWorks BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
 ** SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED
 ** TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
 ** PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
 ** LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
 ** NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 ** SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 ** 
 ***************************************************************************/

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Demo.yFiles.GraphEditor.Properties {
    
    
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.Editors.SettingsDesigner.SettingsSingleFileGenerator", "16.2.0.0")]
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        private static Settings defaultInstance = ((Settings)(global::System.Configuration.ApplicationSettingsBase.Synchronized(new Settings())));
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("")]
        public string LastOpenFile {
            get {
                return ((string)(this["LastOpenFile"]));
            }
            set {
                this["LastOpenFile"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Collections.Specialized.StringCollection MruFiles {
            get {
                return ((global::System.Collections.Specialized.StringCollection)(this["MruFiles"]));
            }
            set {
                this["MruFiles"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0, 0")]
        public global::System.Drawing.Point LastLocation {
            get {
                return ((global::System.Drawing.Point)(this["LastLocation"]));
            }
            set {
                this["LastLocation"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Normal")]
        public global::System.Windows.Forms.FormWindowState LastState {
            get {
                return ((global::System.Windows.Forms.FormWindowState)(this["LastState"]));
            }
            set {
                this["LastState"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Unchecked")]
        public global::System.Windows.Forms.CheckState ShowOverviewState {
            get {
                return ((global::System.Windows.Forms.CheckState)(this["ShowOverviewState"]));
            }
            set {
                this["ShowOverviewState"] = value;
            }
        }
               
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("Checked")]
        public global::System.Windows.Forms.CheckState ShowPropertyViewState {
            get {
                return ((global::System.Windows.Forms.CheckState)(this["ShowPropertyViewState"]));
            }
            set {
                this["ShowPropertyViewState"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool UpgradeSettings {
            get {
                return ((bool)(this["UpgradeSettings"]));
            }
            set {
                this["UpgradeSettings"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Xml.XmlDocument LayoutModuleState {
            get {
                return ((global::System.Xml.XmlDocument)(this["LayoutModuleState"]));
            }
            set {
                this["LayoutModuleState"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool AutoAdjustContentRectangle {
            get {
                return ((bool)(this["AutoAdjustContentRectangle"]));
            }
            set {
                this["AutoAdjustContentRectangle"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool AutomaticallyRemoveEmptyLabels {
            get {
                return ((bool)(this["AutomaticallyRemoveEmptyLabels"]));
            }
            set {
                this["AutomaticallyRemoveEmptyLabels"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool GridEnabled {
            get {
                return ((bool)(this["GridEnabled"]));
            }
            set {
                this["GridEnabled"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("5")]
        public int GridWidth {
            get {
                return ((int)(this["GridWidth"]));
            }
            set {
                this["GridWidth"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("50")]
        public int UndoSize {
            get {
                return ((int)(this["UndoSize"]));
            }
            set {
                this["UndoSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("3")]
        public float HitTestRadius {
            get {
                return ((float)(this["HitTestRadius"]));
            }
            set {
                this["HitTestRadius"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("1024, 768")]
        public global::System.Drawing.Size MainSize {
            get {
                return ((global::System.Drawing.Size)(this["MainSize"]));
            }
            set {
                this["MainSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool GridVisible {
            get {
                return ((bool)(this["GridVisible"]));
            }
            set {
                this["GridVisible"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("0")]
        public int GridStyle {
            get {
                return ((int)(this["GridStyle"]));
            }
            set {
                this["GridStyle"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public global::System.Xml.XmlDocument ToolsModuleState {
            get {
                return ((global::System.Xml.XmlDocument)(this["ToolsModuleState"]));
            }
            set {
                this["ToolsModuleState"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("<?xml version=\"1.0\" encoding=\"utf-16\"?>\r\n<graphml xmlns:y=\"http://www.yworks.com/" +
            "xml/graphml\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:yforms=" +
            "\"http://www.yworks.com/xml/yfiles.net/1.0/forms\" xsi:schemaLocation=\"http://grap" +
            "hml.graphdrawing.org/xmlns/graphml http://www.yworks.com/xml/schema/graphml.net/" +
            "1.0/ygraphml.xsd \" version=\"1.2\" xmlns=\"http://graphml.graphdrawing.org/xmlns/gr" +
            "aphml\">\r\n  <key id=\"d0\" for=\"node\" attr.name=\"labels\" attr.type=\"complex\" />\r\n  " +
            "<key id=\"d1\" for=\"node\" attr.name=\"geometry\" attr.type=\"complex\" />\r\n  <key id=\"" +
            "d2\" for=\"node\" attr.name=\"style\" attr.type=\"complex\" />\r\n  <key id=\"d3\" for=\"edg" +
            "e\" attr.name=\"labels\" attr.type=\"complex\" />\r\n  <key id=\"d4\" for=\"edge\" attr.nam" +
            "e=\"geometry\" attr.type=\"complex\" />\r\n  <key id=\"d5\" for=\"edge\" attr.name=\"style\"" +
            " attr.type=\"complex\" />\r\n  <key id=\"d6\" for=\"graph\" attr.name=\"graphSettings\" at" +
            "tr.type=\"complex\" />\r\n  <key id=\"d7\" for=\"graph\" attr.name=\"customSettings\" attr" +
            ".type=\"complex\" />\r\n  <key id=\"d8\" for=\"graph\" attr.name=\"sharedData\" attr.type=" +
            "\"complex\" />\r\n  <key id=\"d9\" for=\"port\" attr.name=\"geometry\" attr.type=\"complex\"" +
            ">\r\n    <default>\r\n      <y:Geometry x=\"0\" y=\"0\" />\r\n    </default>\r\n  </key>\r\n  " +
            "<key id=\"d10\" for=\"port\" attr.name=\"style\" attr.type=\"complex\" />\r\n  <graph id=\"" +
            "G\" edgedefault=\"directed\">\r\n    <data key=\"d8\">\r\n      <y:SharedData>\r\n        <" +
            "y:Font family=\"Microsoft Sans Serif\" points=\"10\" style=\"Regular\" id=\"1\" />\r\n    " +
            "  </y:SharedData>\r\n    </data>\r\n    <data key=\"d7\">\r\n      <y:MyDefaultSettings>" +
            "\r\n        <!--Specialized Group Node settings-->\r\n        <!--Default Styles-->\r" +
            "\n        <y:DefaultGroupNodeLabelStyle>\r\n          <y:ISimpleLabelStyle autoFlip" +
            "=\"true\" clipText=\"true\">\r\n            <y:StringFormat alignment=\"Far\" />\r\n      " +
            "      <y:Font refid=\"1\" />\r\n            <y:Brush name=\"SolidBrush\" color=\"Black\"" +
            " />\r\n          </y:ISimpleLabelStyle>\r\n        </y:DefaultGroupNodeLabelStyle>\r\n" +
            "        <!--Label models and parameters-->\r\n        <y:DefaultGroupNodeLabelMode" +
            "lParameter>\r\n          <y:InteriorStretchLabelModel position=\"North\">\r\n         " +
            "   <y:ModelState type=\"InteriorStretchLabelModel\">\r\n              <y:Insets left" +
            "=\"0\" right=\"0\" top=\"0\" bottom=\"0\" />\r\n            </y:ModelState>\r\n          </y" +
            ":InteriorStretchLabelModel>\r\n        </y:DefaultGroupNodeLabelModelParameter>\r\n " +
            "     </y:MyDefaultSettings>\r\n    </data>\r\n    <data key=\"d6\">\r\n      <y:GraphSet" +
            "tings>\r\n        <!--Boolean flags-->\r\n        <y:Flags autoAdjustPreferredLabelS" +
            "ize=\"true\" autoCleanupPorts=\"true\" shareDefaultEdgeLabelModelParameter=\"false\" s" +
            "hareDefaultEdgeLabelStyleInstance=\"false\" shareDefaultEdgeStyleInstance=\"false\" " +
            "shareDefaultNodeLabelModelParameter=\"false\" shareDefaultNodeLabelStyleInstance=\"" +
            "false\" shareDefaultNodeStyleInstance=\"false\" shareDefaultPortStyleInstance=\"fals" +
            "e\" usePortCandidateProviders=\"false\" />\r\n        <!--Default Styles-->\r\n        " +
            "<y:DefaultEdgeStyle>\r\n          <y:IPolylineEdgeStyle>\r\n            <y:Pen name=" +
            "\"SolidColor\" color=\"#FF000000\" width=\"1\" />\r\n            <y:SourceArrow>\r\n      " +
            "        <y:DefaultArrow type=\"None\" />\r\n            </y:SourceArrow>\r\n          " +
            "  <y:TargetArrow>\r\n              <y:DefaultArrow type=\"Default\" cropLength=\"0\" s" +
            "cale=\"1\">\r\n                <y:Brush name=\"SolidBrush\" color=\"Black\" />\r\n        " +
            "      </y:DefaultArrow>\r\n            </y:TargetArrow>\r\n          </y:IPolylineEd" +
            "geStyle>\r\n        </y:DefaultEdgeStyle>\r\n        <y:DefaultNodeStyle>\r\n         " +
            " <y:IBevelNodeStyle color=\"DarkOrange\" radius=\"5\" inset=\"2\" />\r\n        </y:Defa" +
            "ultNodeStyle>\r\n        <y:DefaultPortStyle />\r\n        <y:DefaultEdgeLabelStyle>" +
            "\r\n          <y:ISimpleLabelStyle autoFlip=\"true\" clipText=\"true\">\r\n            <" +
            "y:Font refid=\"1\" />\r\n            <y:Brush name=\"SolidBrush\" color=\"Black\" />\r\n  " +
            "        </y:ISimpleLabelStyle>\r\n        </y:DefaultEdgeLabelStyle>\r\n        <y:D" +
            "efaultNodeLabelStyle>\r\n          <y:ISimpleLabelStyle autoFlip=\"true\" clipText=\"" +
            "true\">\r\n            <y:Font refid=\"1\" />\r\n            <y:Brush name=\"SolidBrush\"" +
            " color=\"Black\" />\r\n          </y:ISimpleLabelStyle>\r\n        </y:DefaultNodeLabe" +
            "lStyle>\r\n        <!--Label models and parameters-->\r\n        <y:DefaultEdgeLabel" +
            "ModelParameter>\r\n          <y:SliderEdgeLabelModel index=\"1\" ratio=\"0\">\r\n       " +
            "     <y:ModelState type=\"SliderEdgeLabelModel\" distance=\"0\" angle=\"0\" edgeRelati" +
            "veDistance=\"true\" />\r\n          </y:SliderEdgeLabelModel>\r\n        </y:DefaultEd" +
            "geLabelModelParameter>\r\n        <y:DefaultNodeLabelModelParameter>\r\n          <y" +
            ":InteriorLabelModel position=\"Center\">\r\n            <y:ModelState type=\"Interior" +
            "LabelModel\">\r\n              <y:Insets left=\"0\" right=\"0\" top=\"0\" bottom=\"0\" />\r\n" +
            "            </y:ModelState>\r\n          </y:InteriorLabelModel>\r\n        </y:Defa" +
            "ultNodeLabelModelParameter>\r\n        <y:DefaultGroupNodeStyle>\r\n          <yform" +
            "s:CollapsibleNodeStyleDecorator Insets=\"0, 0, 0, 0\">\r\n            <yforms:Collap" +
            "sibleNodeStyleDecorator.ButtonLocationParameter>\r\n              <y:InteriorLabel" +
            "Model position=\"NorthWest\">\r\n                <y:ModelState type=\"InteriorLabelMo" +
            "del\">\r\n                  <y:Insets left=\"0\" right=\"0\" top=\"0\" bottom=\"0\" />\r\n   " +
            "             </y:ModelState>\r\n              </y:InteriorLabelModel>\r\n           " +
            " </yforms:CollapsibleNodeStyleDecorator.ButtonLocationParameter>\r\n            <y" +
            "forms:CollapsibleNodeStyleDecorator.Wrapped>\r\n              <y:IPanelNodeStyle c" +
            "olor=\"#FFCFE2F8\" labelInsetsColor=\"#FFCFE2F8\">\r\n                <y:InsetsRectang" +
            "le x=\"5\" y=\"5\" width=\"5\" height=\"5\" />\r\n              </y:IPanelNodeStyle>\r\n    " +
            "        </yforms:CollapsibleNodeStyleDecorator.Wrapped>\r\n          </yforms:Coll" +
            "apsibleNodeStyleDecorator>\r\n        </y:DefaultGroupNodeStyle>\r\n        <!--Misc" +
            " settings-->\r\n        <y:DefaultNodeSize width=\"50\" height=\"30\" />\r\n      </y:Gr" +
            "aphSettings>\r\n    </data>\r\n  </graph>\r\n</graphml>")]
        public global::System.Xml.XmlDocument DefaultGraphSettings {
            get {
                return ((global::System.Xml.XmlDocument)(this["DefaultGraphSettings"]));
            }
            set {
                this["DefaultGraphSettings"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool AdjustNodeToLabelSize {
            get {
                return ((bool)(this["AdjustNodeToLabelSize"]));
            }
            set {
                this["AdjustNodeToLabelSize"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool UseEdgeBridges {
            get {
                return ((bool)(this["UseEdgeBridges"]));
            }
            set {
                this["UseEdgeBridges"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("True")]
        public bool SnappingEnabled {
            get {
                return ((bool)(this["SnappingEnabled"]));
            }
            set {
                this["SnappingEnabled"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("False")]
        public bool OrthogonalEdgesEnabled {
            get {
                return ((bool)(this["OrthogonalEdgesEnabled"]));
            }
            set {
                this["OrthogonalEdgesEnabled"] = value;
            }
        }
        
        [global::System.Configuration.UserScopedSettingAttribute()]
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.Configuration.DefaultSettingValueAttribute("GridPoints")]
        public global::yWorks.Controls.Input.GridSnapTypes GridSnapType {
            get {
                return ((global::yWorks.Controls.Input.GridSnapTypes)(this["GridSnapType"]));
            }
            set {
                this["GridSnapType"] = value;
            }
        }
    }
}
